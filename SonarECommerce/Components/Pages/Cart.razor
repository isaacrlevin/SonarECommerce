@page "/cart"
@using SonarECommerce.Data.Models
@using SonarECommerce.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject IShoppingCartService CartService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Shopping Cart - TechStore</PageTitle>

<div class="container py-4">
    <div class="row">
        <div class="col-12">
            <h2 class="mb-4">
                <i class="fas fa-shopping-cart me-2"></i>
                Shopping Cart
            </h2>
        </div>
    </div>

    @if (loading)
    {
        <div class="loading-spinner">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (cart == null || !cart.CartItems.Any())
    {
        <!-- Empty Cart -->
        <div class="row">
            <div class="col-12">
                <div class="text-center py-5">
                    <i class="fas fa-shopping-cart fa-4x text-muted mb-4"></i>
                    <h3 class="text-muted">Your cart is empty</h3>
                    <p class="text-muted mb-4">Looks like you haven't added any items to your cart yet.</p>
                    <a href="/products" class="btn btn-primary btn-lg">Start Shopping</a>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <!-- Cart Items -->
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Cart Items (@cart.TotalItems items)</h5>
                    </div>
                    <div class="card-body p-0">
                        @foreach (var item in cart.CartItems)
                        {
                            <div class="cart-item border-bottom p-3">
                                <div class="row align-items-center">
                                    <div class="col-md-2">
                                        <div class="bg-light d-flex align-items-center justify-content-center rounded" style="height: 80px;">
                                            @if (!string.IsNullOrEmpty(item.Product.ImageUrl))
                                            {
                                                <img src="@item.Product.ImageUrl" alt="@item.Product.Name" class="img-fluid rounded" style="max-height: 80px; object-fit: cover;">
                                            }
                                            else
                                            {
                                                <i class="fas fa-microchip text-muted fa-2x"></i>
                                            }
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <h6 class="mb-1">
                                            <a href="/product/@item.Product.Id" class="text-decoration-none text-dark">
                                                @item.Product.Name
                                            </a>
                                        </h6>
                                        <small class="text-muted">@item.Product.Brand - @item.Product.Category.Name</small>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="fw-semibold">$@item.Price.ToString("F2")</div>
                                        <small class="text-muted">each</small>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="input-group input-group-sm" style="max-width: 120px;">
                                            <button class="btn btn-outline-secondary" type="button" 
                                                    @onclick="() => UpdateQuantity(item.ProductId, item.Quantity - 1)"
                                                    disabled="@(item.Quantity <= 1 || updating)">
                                                <i class="fas fa-minus"></i>
                                            </button>
                                            <input type="number" class="form-control text-center" 
                                                   value="@item.Quantity" 
                                                   @onchange="@(e => UpdateQuantity(item.ProductId, int.Parse(e.Value?.ToString() ?? "1")))"
                                                   min="1" max="@item.Product.StockQuantity">
                                            <button class="btn btn-outline-secondary" type="button" 
                                                    @onclick="() => UpdateQuantity(item.ProductId, item.Quantity + 1)"
                                                    disabled="@(item.Quantity >= item.Product.StockQuantity || updating)">
                                                <i class="fas fa-plus"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="col-md-1">
                                        <div class="fw-bold">$@item.TotalPrice.ToString("F2")</div>
                                    </div>
                                    <div class="col-md-1">
                                        <button type="button" class="btn btn-outline-danger btn-sm" 
                                                @onclick="() => RemoveItem(item.ProductId)"
                                                disabled="@updating"
                                                title="Remove item">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="card-footer">
                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-outline-danger" @onclick="ClearCart" disabled="@updating">
                                <i class="fas fa-trash me-2"></i>
                                Clear Cart
                            </button>
                            <a href="/products" class="btn btn-outline-primary">
                                <i class="fas fa-arrow-left me-2"></i>
                                Continue Shopping
                            </a>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Summary -->
            <div class="col-lg-4">
                <div class="card sticky-top">
                    <div class="card-header">
                        <h5 class="mb-0">Order Summary</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Subtotal (@cart.TotalItems items):</span>
                            <span>$@cart.TotalAmount.ToString("F2")</span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Shipping:</span>
                            <span class="text-success">
                                @if (cart.TotalAmount >= 100)
                                {
                                    <text>FREE</text>
                                }
                                else
                                {
                                    <text>$9.99</text>
                                }
                            </span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Tax (Estimated):</span>
                            <span>$@((cart.TotalAmount * 0.08m).ToString("F2"))</span>
                        </div>
                        <hr>
                        <div class="d-flex justify-content-between fw-bold h5">
                            <span>Total:</span>
                            <span>${@((cart.TotalAmount + (cart.TotalAmount >= 100 ? 0 : 9.99m) + (cart.TotalAmount * 0.08m)).ToString("F2"))}</span>
                        </div>
                        
                        @if (cart.TotalAmount < 100)
                        {
                            <div class="alert alert-info small mb-3">
                                <i class="fas fa-info-circle me-1"></i>
                                Add $@((100 - cart.TotalAmount).ToString("F2")) more for free shipping!
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-success small mb-3">
                                <i class="fas fa-check-circle me-1"></i>
                                You qualify for free shipping!
                            </div>
                        }

                        <div class="d-grid gap-2">
                            <button type="button" class="btn btn-primary btn-lg" @onclick="ProceedToCheckout">
                                <i class="fas fa-credit-card me-2"></i>
                                Proceed to Checkout
                            </button>
                            <button type="button" class="btn btn-outline-secondary" @onclick="SaveForLater">
                                <i class="fas fa-heart me-2"></i>
                                Save for Later
                            </button>
                        </div>
                    </div>
                    <div class="card-footer text-center">
                        <small class="text-muted">
                            <i class="fas fa-shield-alt me-1"></i>
                            Secure checkout with SSL encryption
                        </small>
                    </div>
                </div>

                <!-- Suggested Products -->
                <div class="card mt-4">
                    <div class="card-header">
                        <h6 class="mb-0">You might also like</h6>
                    </div>
                    <div class="card-body">
                        <div class="text-center text-muted">
                            <small>Suggested products coming soon!</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private ShoppingCart? cart;
    private bool loading = true;
    private bool updating = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task LoadCart()
    {
        loading = true;
        StateHasChanged();

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            
            if (!string.IsNullOrEmpty(userId))
            {
                cart = await CartService.GetOrCreateCartAsync(userId);
            }
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task UpdateQuantity(int productId, int newQuantity)
    {
        if (newQuantity < 1) return;

        updating = true;
        StateHasChanged();

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            
            if (!string.IsNullOrEmpty(userId))
            {
                var success = await CartService.UpdateCartItemAsync(userId, productId, newQuantity);
                if (success)
                {
                    await LoadCart();
                    await JSRuntime.InvokeVoidAsync("showToast", "Cart updated successfully!", "success");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("showToast", "Failed to update cart.", "error");
                }
            }
        }
        finally
        {
            updating = false;
            StateHasChanged();
        }
    }

    private async Task RemoveItem(int productId)
    {
        updating = true;
        StateHasChanged();

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            
            if (!string.IsNullOrEmpty(userId))
            {
                var success = await CartService.RemoveFromCartAsync(userId, productId);
                if (success)
                {
                    await LoadCart();
                    await JSRuntime.InvokeVoidAsync("showToast", "Item removed from cart.", "info");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("showToast", "Failed to remove item.", "error");
                }
            }
        }
        finally
        {
            updating = false;
            StateHasChanged();
        }
    }

    private async Task ClearCart()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to clear your cart?");
        if (!confirmed) return;

        updating = true;
        StateHasChanged();

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            
            if (!string.IsNullOrEmpty(userId))
            {
                var success = await CartService.ClearCartAsync(userId);
                if (success)
                {
                    await LoadCart();
                    await JSRuntime.InvokeVoidAsync("showToast", "Cart cleared successfully!", "info");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("showToast", "Failed to clear cart.", "error");
                }
            }
        }
        finally
        {
            updating = false;
            StateHasChanged();
        }
    }

    private void ProceedToCheckout()
    {
        Navigation.NavigateTo("/checkout");
    }

    private async Task SaveForLater()
    {
        await JSRuntime.InvokeVoidAsync("showToast", "Save for later feature coming soon!", "info");
    }
}